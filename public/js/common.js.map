{"version":3,"sources":["common.jsx","utils.jsx","base.jsx","list.jsx"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["let GLOB = {};\nGLOB.controllers = {};\n\nGLOB.configs = {\n    databaseDateTimeFormat: \"YYYY-MM-DD HH:mm:ss\", // moment\n    databaseDateFormat: \"YYYY-MM-DD\", //moment\n    displayDateMomentFormat: 'MM/DD/YYYY', // moment\n    displayDateFormat: \"dd/MM\" // angular\n};\n\nGLOB.options = {\n    actions: {\"leastAppear\": 'Số ít xuất hiện nhất'}\n};","class Utils {\n    constructor() {\n\n    }\n\n    init() {\n\n    }\n\n    // upper case the first letter of a given string\n    captitalize(string) {\n        return string.replace(/(?:^|\\s)\\S/g, function(a) { return a.toUpperCase(); });\n    }\n\n    formatPhone(phoneNumber) {\n        let raw = phoneNumber.replace(/[\\(\\)\\-\\s]/gi, '');\n        if (raw.length < 3) return \"\";\n        return `(${raw.slice(0, 3)}) ${raw.slice(3, 6)}-${raw.slice(6)}`;\n    }\n\n    padLeft(value, length = 7) {\n        var str = \"\" + value;\n        var pad = \"0\".repeat(length);\n        return pad.substring(0, pad.length - str.length) + str;\n    }\n}","class BaseController {\n    constructor() {\n        this.utils = new Utils();\n        this.app = null;\n        this.modalScope = null;\n        this.currency = new Intl.NumberFormat('en-US', {style: \"currency\", currency: \"USD\"});\n        this.modalWrapper = $(\"#modalWrapper\");\n    }\n\n    init() {\n        this.initModule();\n        this.initModalController();\n        this.bindCommonEvent();\n    }\n\n    initModalController() {\n        let $this = this;\n        this.app.controller('modalController', ($scope) => {\n            /* alert modal */\n            $scope.alertInit = () => {\n                $scope.alertTitle = \"Message\";\n                $scope.alertMessage = \"\";\n                $scope.alertCloseFunction = null;\n                $scope.alertInRed = false;\n            };\n            $scope.alertClose = () => {\n                if ($scope.alertCloseFunction) $scope.alertCloseFunction();\n                $this.hideAlertMessage();\n            };\n\n            /* confirm modal */\n            $scope.confirmInit = () => {\n                $scope.confirmTitle = \"Confirm\";\n                $scope.confirmYesTitle = \"Yes\";\n                $scope.confirmNoTitle = \"No\";\n                $scope.confirmMessage = \"\";\n                $scope.confirmCloseFunction = null;\n                $scope.confirmYesFunction = null;\n                $scope.confirmNoFunction = null;\n            };\n            $scope.confirmClose = () => {\n                if ($scope.confirmCloseFunction) $scope.confirmCloseFunction();\n                $this.hideConfirmMessage();\n            };\n            $scope.confirmYes = () => {\n                $scope.confirmYesFunction();\n                $this.hideConfirmMessage();\n            };\n            $scope.confirmNo = () => {\n                if ($scope.confirmNoFunction) $scope.confirmNoFunction();\n                $this.hideConfirmMessage();\n            };\n        });\n    }\n\n    initModule() {\n        this.app =\n            angular\n                .module('lottery', ['ngResource'])\n                .filter('range', () => {\n                    return (input, min, max, step = 1) => {\n                        min = parseInt(min);\n                        max = parseInt(max);\n\n                        for (let i = min; i <= max; i += step) {\n                            input.push(i);\n                        }\n                        return input;\n                    }\n                })\n                .filter(\"sanitize\", ['$sce', ($sce) => {\n                    return (htmlCode) => {\n                        return $sce.trustAsHtml(htmlCode);\n                    }\n                }])\n                .directive('onFinishRender', ($timeout) => {\n                    return (scope, element, attrs) => {\n                        if (scope.$last === true){\n                            $timeout(() => {\n                                scope.$eval(attrs.onFinishRender);\n                            }, 5);\n                        }\n                    };\n                })\n                .config(['$httpProvider', ($httpProvider) => {\n                    $httpProvider.interceptors.push('customHttpInterceptor');\n                }])\n                .factory('customHttpInterceptor', () => {\n                    // intercept function for show / hide loading when sending http ajax\n                    return {\n                        request: (config) => {\n                            $(\"#mainLoading\").show();\n                            return config;\n                        },\n\n                        requestError: (config) => {\n                            $(\"#mainLoading\").hide();\n                            console.log(\"request Error\");\n                            return config;\n                        },\n\n                        response: (res) =>{\n                            console.log(res.data);\n                            $(\"#mainLoading\").hide();\n\n                            return res;\n                        },\n\n                        responseError: (res) => {\n                            $(\"#mainLoading\").hide();\n                            console.log(\"response Error\");\n                            console.log(res);\n                            return res;\n                        }\n                    }\n                });\n    }\n\n    /**\n     * this function listen to common event on the master page\n     */\n    bindCommonEvent() {\n\n    }\n\n    /**\n     * call this function when angular ready render component\n     */\n    angularReadyFunction() {\n        this.modalScope = angular.element($(\"#modalWrapper\")).scope();\n    }\n\n    /**\n     * show alert message\n     * @param options {message, title, onClose, inRed}\n     */\n    showAlertMessage(options) {\n        if (!options.message) {\n            console.warn(\"message param is required when calling showAlertMessage\");\n            return;\n        }\n\n        let message = options.message;\n        let title = options.title || \"Message\";\n        let closeFunction = options.onClose || null;\n        let inRed = options.inRed || false;\n        this.modalScope.alertTitle = title;\n        this.modalScope.alertMessage = message;\n        this.modalScope.alertCloseFunction = closeFunction;\n        this.modalScope.alertInRed = inRed;\n        $(\"#alertModal\").modal('show');\n    }\n\n    /**\n     * hide alert message and reset params\n     */\n    hideAlertMessage() {\n        // reset params\n        this.modalScope.alertInit();\n        $(\"#alertModal\").modal('hide');\n    }\n\n    /**\n     * show confirm message with Yes No button\n     * @param options {message, title, yesTitle, noTitle, onClose, onNo, onYes}\n     */\n    showConfirmMessage(options) {\n        if (!options.message || !options.onYes) {\n            console.warn(\"message param and onYes callback function are required when calling showConfirmMessage\");\n            return;\n        }\n\n        let message = options.message;\n        let title = options.title || \"Message\";\n        let yesTitle = options.yesTitle || \"Yes\";\n        let noTitle = options.noTitle || \"No\";\n        let closeFunction = options.onClose || null;\n        let noFunction = options.onNo || null;\n        let yesFunction = options.onYes || null;\n        this.modalScope.confirmTitle = title;\n        this.modalScope.confirmYesTitle = yesTitle;\n        this.modalScope.confirmNoTitle = noTitle;\n        this.modalScope.confirmMessage = message;\n        this.modalScope.confirmCloseFunction = closeFunction;\n        this.modalScope.confirmYesFunction = yesFunction;\n        this.modalScope.confirmNoFunction = noFunction;\n        $(\"#confirmModal\").modal('show');\n    }\n\n    /**\n     * hide confirm message and reset params\n     */\n    hideConfirmMessage() {\n        // reset params\n        this.modalScope.confirmInit();\n        $(\"#confirmModal\").modal('hide');\n    }\n}","class ListController extends BaseController {\n    constructor() {\n        super();\n    }\n\n    init() {\n        super.init();\n\n    }\n}"],"sourceRoot":"/source/"}